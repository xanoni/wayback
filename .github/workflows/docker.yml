name: Docker

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths-ignore:
      - '**.md'
      - 'snapcraft.yaml'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '**.md'
      - 'snapcraft.yaml'

jobs:
  publish:
    if: github.repository == 'wabarc/wayback'
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          GHCR_HOST=ghcr.io
          DOCKER_IMAGE_SCOPE=${{ github.repository }} # foo/bar
          if [ "${{ github.event_name }}" = "schedule" ]; then
            DOCKER_IMAGE_VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            DOCKER_IMAGE_VERSION=${GITHUB_REF#refs/*/v}
            TAGS="${DOCKER_IMAGE_SCOPE}:latest,${GHCR_HOST}/${DOCKER_IMAGE_SCOPE}:latest"
          else
            DOCKER_IMAGE_VERSION=edge
          fi
          TAGS="${TAGS},${DOCKER_IMAGE_SCOPE}:${DOCKER_IMAGE_VERSION},${GHCR_HOST}/${DOCKER_IMAGE_SCOPE}:${DOCKER_IMAGE_VERSION}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=version::${DOCKER_IMAGE_VERSION}
          echo ::set-output name=docker::${DOCKER_IMAGE_SCOPE}
          echo ::set-output name=ghcr::${GHCR_HOST}/${DOCKER_IMAGE_SCOPE}
          echo ::set-output name=images::${DOCKER_IMAGE_SCOPE},${GHCR_HOST}/${DOCKER_IMAGE_SCOPE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Generate meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ steps.prep.outputs.images }}
          tags: |
            type=semver,pattern=${{ steps.prep.outputs.version }}
            type=raw,${{ steps.prep.outputs.version }}

      - name: Build artifacts
        uses: docker/bake-action@v1
        with:
          files: ./docker-bake.hcl
          targets: artifact-all

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wayback
          path: ./dist/*
          if-no-files-found: error

      - name: Build and push Docker image
        uses: docker/bake-action@v1
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: release
          push: ${{ github.event_name != 'pull_request' }}

      - name: Check manifest
        if: github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prep.outputs.docker }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ steps.prep.outputs.ghcr }}:${{ steps.meta.outputs.version }}

      - name: Inspect image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ steps.prep.outputs.docker }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ steps.prep.outputs.docker }}:${{ steps.meta.outputs.version }}
          docker pull ${{ steps.prep.outputs.ghcr }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ steps.prep.outputs.ghcr }}:${{ steps.meta.outputs.version }}
